<?php

namespace QQ\Module\Vpgov\Controller;

use Phalcon\Di\Service;
use QQ\Core\Library\Utils;
use QQ\Core\Model\FileUpload;
use QQ\Core\Model\Services\Service\FileUpload as UploadService;
use QQ\Core\Tool\QFunction;

class UploadController extends ControllerBase
{
    /** @var \QQ\Core\Model\Services\Service\Fileupload $upload_service */
    protected $upload_service;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->upload_service = $this->di->getShared(UploadService::class);
        $this->view->header = 'Files';
    }

    public function indexAction($model = 'upload', $uuid = null)
    {
        $this->assets->addJs("/modules/vpgov/themes/backend/default/ng-app/upload/controllers/index.js");
        $this->assets->addJs("/modules/vpgov/themes/backend/default/ng-app/upload/services/index.js");
        $this->view->model = $model;
        $this->view->model_uuid = $uuid;
        $this->view->setVar('main_title', ['vi' => 'Quản lý Files']);
        $this->view->setVar('main_breadcrumb', [
            ['title' => ['vi' => 'Trang chủ'], 'href' => '/cms/upload'],
            ['title' => ['vi' => 'Quản lý Files'], 'href' => false],
        ]);
        $this->view->pick('upload/index');
    }

    public function popupAction($model = 'upload', $uuid = null)
    {
        $this->view->model = $model;
        $this->view->model_uuid = $uuid;
        $files = FileUpload::find();
        $this->view->files = $files;
    }


    public function uploadAction()
    {
        $this->view->disable();
//        if (!$this->tokenManager->checkToken('User', $this->request->getPost('token_key'), $this->request->getPost('token_value'))) {
//            echo json_encode(array(
//                'success' => false
//            ));
//            exit();
//        }
        $watermark = $this->getDI()->getShared('option')->get('watermark', false);

        // Check if the user has uploaded files
        if ($this->request->hasFiles() == true) {
            $baseLocation = 'files/';

            // Print the real file names and sizes
//            foreach ($this->request->getUploadedFiles() as $file) {
//                $photos = new Photo();
//                $photos->name = $file->getName();
//                $photos->size = $file->getSize();
//                $photos->save();
//
//                //Move the file into the application
//                $file->moveTo($baseLocation . $file->getName());
//            }
            $model = $this->request->getPost('model');
            $model_uuid = $this->request->getPost('model_uuid');
            $lang = $this->request->getPost('lang');
            $upload_folder = $this->request->getPost('upload_folder');
            $module = $this->request->getPost('module');

            $upload_dir = content_path('uploads') . DIRECTORY_SEPARATOR;

//            $upload_time_dir = 'vpgov' . DIRECTORY_SEPARATOR . date('Y') . DIRECTORY_SEPARATOR . date('m') . DIRECTORY_SEPARATOR . date('d') . DIRECTORY_SEPARATOR;
            $upload_time_dir = $module . DIRECTORY_SEPARATOR . ($model). DIRECTORY_SEPARATOR. ($upload_folder). DIRECTORY_SEPARATOR;

            $upload_dir .= $upload_time_dir;
            echo $upload_dir;
            if (!is_dir($upload_dir)) {
                mkdir($upload_dir, 0755, true);
            }



            foreach ($this->request->getUploadedFiles() as $file) {
//                $filename = Utils\Slug::generate($file->getName());
                $uuid = $this->request->getPost('uuid') ?: container('random')->uuid();
                $slug = Utils\Slug::clean($file->getName());
                $fu = new FileUpload();
                $fu->uuid = $uuid;
                $data = [
                    'size' => $file->getSize(),
                    'type' => $file->getType(),
                    'name' => $slug, //$file->getName(),
                    'ext' => $file->getExtension(),
                    'path' => $upload_time_dir,
                    'lang' => $lang
                ];
                $fu->data = $data;
                $fu->model = empty($model) ? 'upload' : $model;
                $fu->model_uuid = QFunction::isValidUuid($model_uuid) ? $model_uuid : null;
                $fu->module = $module;
                $fu->save();
                $file->moveTo($upload_dir . $slug);
                $filepath = $upload_dir . $slug;
//                $image = new \Phalcon\Image\Adapter\GD($filepath);
//                if(!empty($watermark)){
//                    $image->text($watermark, true, true);
//                }
//                $image->save();
            }
            echo json_encode(array(
                'success' => true
            ));
            exit();
        }
        echo json_encode(array(
            'success' => false
        ));
    }


    // Deprecated
    public function searchAction()
    {
        $this->view->disable();

        $model = $this->request->getQuery('model');
        $module = $this->request->getQuery('module');
        $model_uuid = $this->request->getQuery('model_uuid');

        if ($model && $model_uuid) {
            $result = $this->upload_service->getByModelUuid($model, $model_uuid);
//            var_dump($result->toArray());
        }


        $result = $this->upload_service->query(array(
            'model' => $model,
            'module' => $module
        ));
        $items = array();
        if ($result->count()) {

            foreach ($result as $item) {
                $items[] = array(
                    'uuid' => $item->uuid,
                    'data' => $item->data
                );
            }
        }

        echo json_encode(array(
            'success' => true,
            'items' => $items,
            'count' => $result->count()
//            'count'     => $result->total_items
        ));
    }

    public function queryAction()
    {
        $this->view->disable();
        $filter = array(
            'lang' => $this->request->getQuery('lang'),
            'module' => $this->request->getQuery('module'),
            'model' => $this->request->getQuery('model'),
            'model_uuid' => $this->request->getQuery('model_uuid'),
            'attr' => $this->request->getQuery('attribute'),
            'ext' => $this->request->getQuery('ext'),
            'upload_folder' => $this->request->getQuery('upload_folder'),
            'page_size' => $this->request->getQuery('pageSize') ?: 200,
            'page_number' => $this->request->getQuery('pageNumber') ?: 1
        );
        $result = $this->upload_service->filter($filter);
        if ($result->count()) {
            $total_count = $result->getFirst()->total_count;
            $pages = ceil($total_count / $filter['page_size']);
            foreach ($result as $item) {
                $files[] = array(
                    'uuid' => $item->uuid,
                    'data' => $item->data,
                );
            }
            echo json_encode(array(
                'success' => true,
                'files' => $files,
                'count' => $result->getFirst()->total_count,
                'pages' => $pages
            ));
            exit();
        } else {
            echo json_encode(array(
                'success' => false
            ));
            exit();
        }
    }
    public function removeAction(){
        $this->view->disable();
//        if (!$this->tokenManager->checkToken('User', $this->request->getPost('token_key'), $this->request->getPost('token_value'))) {
//            // Json Output
//            echo json_encode(array(
//                'success'   => false,
//                'error'     => 'Token Failed'
//            ));
//        }

        $uuid = $this->request->getPost('uuid');
        try{
            $file = $this->upload_service->getFirstByUuid($uuid);
            if($file){
                // remove from file system
                $module = $file->module;
                $model = $file->model;
                $model_uuid = $file->model_uuid;
                $upload_dir = content_path('uploads') . DIRECTORY_SEPARATOR;
                $upload_dir = empty($module) ? $upload_dir : $upload_dir . $module . DIRECTORY_SEPARATOR;
//                $exception = false;

                //$upload_dir = empty($model) ? $upload_dir : $upload_dir . $model . DIRECTORY_SEPARATOR;
//                $upload_dir = empty($model_uuid) ? $upload_dir : $upload_dir . $model_uuid . DIRECTORY_SEPARATOR;
                $path = $upload_dir . $file->data->path . $file->data->name;
                $can_delete = true;
                if(file_exists($path)){
                    if(@unlink($path)){
                        $can_delete = true;
                    }else{
                        $can_delete = false;
                    }
                }

                if($can_delete && $file->delete()){
                    echo json_encode(array(
                        'success'   => true,
                        'path'      => $path
                    ));
                }else{
                    echo json_encode(array(
                        'success'   => false,
                        'path'      => $path
                    ));
                }
                exit();

                // remove frome db

            }
        }catch(Exceptions\EntityNotFoundException $e){

        }

        echo json_encode(array(
            'success'   => false
        ));
        exit();
    }
}
